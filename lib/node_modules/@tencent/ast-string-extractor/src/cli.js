#!/usr/bin/env node
const { program } = require('commander');
const fg = require('fast-glob');
// const path = require('path');
const { readFileSync, writeFileSync } = require('fs');
const { parseCode, extractStrings, isValidString } = require('./parser/index');
const { detectLanguage } = require('./utils/file-langs');


program
  .version('1.2.2')
  .description('Extract all strings from JS/TS files')
  .requiredOption('-i, --input <patterns...>', 'Glob patterns to match files')
  .option('-o, --output <path>', 'Output file path')
  .option('-r, --recursive', 'Enable recursive directory search')
  .action(async (options) => {
    // try {
      const files = await fg(options.input, {
        ignore: ['**/node_modules/**'],
        onlyFiles: true,
        deep: options.recursive ? Infinity : 1
      });

      const results = {};
      for (const file of files) {
        try {
            if (detectLanguage(file) === null) {
                continue;
            }
            const code = readFileSync(file, 'utf-8');
            const ast = parseCode(code, file);
            extractStrings(ast, file, code).forEach(item => {
              item.text = item.text.trim();
              if (isValidString(item.text)) {
                 results[file] = results[file] || [];
                 results[file].push(item);
              }
            })
        } catch (err) {
            console.error(`Error: ${file}, Msg: `, err.message);
            continue;
        }
      }

      if (options.output) {
        writeFileSync(
          options.output,
          JSON.stringify(results, null)
        );
        // console.log(`Output saved to ${options.output}`);
      } else {
        console.log(JSON.stringify(results, null));
      }
    // } catch (err) {
    //   console.error('Error:', err.message);
    //   process.exit(1);
    // }
  });

program.parse();
